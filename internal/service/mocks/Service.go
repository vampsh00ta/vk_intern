// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "vk/internal/repository/models"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddActor provides a mock function with given fields: ctx, actor
func (_m *Service) AddActor(ctx context.Context, actor models.Actor) (int, error) {
	ret := _m.Called(ctx, actor)

	if len(ret) == 0 {
		panic("no return value specified for AddActor")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Actor) (int, error)); ok {
		return rf(ctx, actor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Actor) int); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Actor) error); ok {
		r1 = rf(ctx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFilm provides a mock function with given fields: ctx, film
func (_m *Service) AddFilm(ctx context.Context, film models.Film) (int, error) {
	ret := _m.Called(ctx, film)

	if len(ret) == 0 {
		panic("no return value specified for AddFilm")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Film) (int, error)); ok {
		return rf(ctx, film)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Film) int); ok {
		r0 = rf(ctx, film)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Film) error); ok {
		r1 = rf(ctx, film)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeActor provides a mock function with given fields: ctx, actor
func (_m *Service) ChangeActor(ctx context.Context, actor models.Actor) error {
	ret := _m.Called(ctx, actor)

	if len(ret) == 0 {
		panic("no return value specified for ChangeActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Actor) error); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeActorPartly provides a mock function with given fields: ctx, actor
func (_m *Service) ChangeActorPartly(ctx context.Context, actor models.Actor) error {
	ret := _m.Called(ctx, actor)

	if len(ret) == 0 {
		panic("no return value specified for ChangeActorPartly")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Actor) error); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeFilm provides a mock function with given fields: ctx, film
func (_m *Service) ChangeFilm(ctx context.Context, film models.Film) error {
	ret := _m.Called(ctx, film)

	if len(ret) == 0 {
		panic("no return value specified for ChangeFilm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Film) error); ok {
		r0 = rf(ctx, film)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeFilmPartly provides a mock function with given fields: ctx, film
func (_m *Service) ChangeFilmPartly(ctx context.Context, film models.Film) error {
	ret := _m.Called(ctx, film)

	if len(ret) == 0 {
		panic("no return value specified for ChangeFilmPartly")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Film) error); ok {
		r0 = rf(ctx, film)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActorByID provides a mock function with given fields: ctx, actorId
func (_m *Service) DeleteActorByID(ctx context.Context, actorId int) error {
	ret := _m.Called(ctx, actorId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActorByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, actorId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFilm provides a mock function with given fields: ctx, id
func (_m *Service) DeleteFilm(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActors provides a mock function with given fields: ctx
func (_m *Service) GetActors(ctx context.Context) ([]models.Actor, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActors")
	}

	var r0 []models.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Actor, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Actor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilms provides a mock function with given fields: ctx, sortBy, orderBy
func (_m *Service) GetFilms(ctx context.Context, sortBy string, orderBy string) ([]models.Film, error) {
	ret := _m.Called(ctx, sortBy, orderBy)

	if len(ret) == 0 {
		panic("no return value specified for GetFilms")
	}

	var r0 []models.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.Film, error)); ok {
		return rf(ctx, sortBy, orderBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.Film); ok {
		r0 = rf(ctx, sortBy, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sortBy, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsByActorName provides a mock function with given fields: ctx, name, sortBy, orderBy
func (_m *Service) GetFilmsByActorName(ctx context.Context, name string, sortBy string, orderBy string) ([]models.Film, error) {
	ret := _m.Called(ctx, name, sortBy, orderBy)

	if len(ret) == 0 {
		panic("no return value specified for GetFilmsByActorName")
	}

	var r0 []models.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]models.Film, error)); ok {
		return rf(ctx, name, sortBy, orderBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []models.Film); ok {
		r0 = rf(ctx, name, sortBy, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, sortBy, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsByTitle provides a mock function with given fields: ctx, title, sortBy, orderBy
func (_m *Service) GetFilmsByTitle(ctx context.Context, title string, sortBy string, orderBy string) ([]models.Film, error) {
	ret := _m.Called(ctx, title, sortBy, orderBy)

	if len(ret) == 0 {
		panic("no return value specified for GetFilmsByTitle")
	}

	var r0 []models.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]models.Film, error)); ok {
		return rf(ctx, title, sortBy, orderBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []models.Film); ok {
		r0 = rf(ctx, title, sortBy, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, title, sortBy, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAdmin provides a mock function with given fields: ctx, token
func (_m *Service) IsAdmin(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLogged provides a mock function with given fields: ctx, token
func (_m *Service) IsLogged(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsLogged")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username
func (_m *Service) Login(ctx context.Context, username string) (string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
