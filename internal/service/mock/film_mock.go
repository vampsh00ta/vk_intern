// Code generated by MockGen. DO NOT EDIT.
// Source: film.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	models "vk/internal/repository/models"

	gomock "github.com/golang/mock/gomock"
)

// MockFilm is a mock of Film interface.
type MockFilm struct {
	ctrl     *gomock.Controller
	recorder *MockFilmMockRecorder
}

// MockFilmMockRecorder is the mock recorder for MockFilm.
type MockFilmMockRecorder struct {
	mock *MockFilm
}

// NewMockFilm creates a new mock instance.
func NewMockFilm(ctrl *gomock.Controller) *MockFilm {
	mock := &MockFilm{ctrl: ctrl}
	mock.recorder = &MockFilmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilm) EXPECT() *MockFilmMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockFilm) AddFilm(ctx context.Context, film models.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", ctx, film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmMockRecorder) AddFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilm)(nil).AddFilm), ctx, film)
}

// ChangeFilm mocks base method.
func (m *MockFilm) ChangeFilm(ctx context.Context, film models.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilm", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilm indicates an expected call of ChangeFilm.
func (mr *MockFilmMockRecorder) ChangeFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilm", reflect.TypeOf((*MockFilm)(nil).ChangeFilm), ctx, film)
}

// ChangeFilmPartly mocks base method.
func (m *MockFilm) ChangeFilmPartly(ctx context.Context, film models.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilmPartly", ctx, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilmPartly indicates an expected call of ChangeFilmPartly.
func (mr *MockFilmMockRecorder) ChangeFilmPartly(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilmPartly", reflect.TypeOf((*MockFilm)(nil).ChangeFilmPartly), ctx, film)
}

// DeleteFilm mocks base method.
func (m *MockFilm) DeleteFilm(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmMockRecorder) DeleteFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilm)(nil).DeleteFilm), ctx, id)
}

// GetFilms mocks base method.
func (m *MockFilm) GetFilms(ctx context.Context, sortBy, orderBy string) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, sortBy, orderBy)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmMockRecorder) GetFilms(ctx, sortBy, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilm)(nil).GetFilms), ctx, sortBy, orderBy)
}

// GetFilmsByActorName mocks base method.
func (m *MockFilm) GetFilmsByActorName(ctx context.Context, name, sortBy, orderBy string) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByActorName", ctx, name, sortBy, orderBy)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByActorName indicates an expected call of GetFilmsByActorName.
func (mr *MockFilmMockRecorder) GetFilmsByActorName(ctx, name, sortBy, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByActorName", reflect.TypeOf((*MockFilm)(nil).GetFilmsByActorName), ctx, name, sortBy, orderBy)
}

// GetFilmsByTitle mocks base method.
func (m *MockFilm) GetFilmsByTitle(ctx context.Context, title, sortBy, orderBy string) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByTitle", ctx, title, sortBy, orderBy)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByTitle indicates an expected call of GetFilmsByTitle.
func (mr *MockFilmMockRecorder) GetFilmsByTitle(ctx, title, sortBy, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByTitle", reflect.TypeOf((*MockFilm)(nil).GetFilmsByTitle), ctx, title, sortBy, orderBy)
}
